# -*- coding: utf-8 -*-
"""PROJECT Brain Tumor Classification-checkpoint.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1c-UiJymJrdRgacP-F-SFk7fz5LgYGraC

### Load Modules
"""

import numpy as np
import time as t
import pandas as pd
import matplotlib.pyplot as plt
import multiprocessing as mp
import concurrent.futures
from sklearn.model_selection import train_test_split
from sklearn.metrics import accuracy_score

"""### Prepare/collect data"""

import os

path = os.listdir('Training/')
classes = {'no_tumor':0, 'pituitary_tumor':1}

import cv2
X = []
Y = []
for cls in classes:
    pth = 'Training/'+cls
    for j in os.listdir(pth):
        img = cv2.imread(pth+'/'+j, 0)
        img = cv2.resize(img, (200,200))
        X.append(img)
        Y.append(classes[cls])

X = np.array(X)
Y = np.array(Y)

X_updated = X.reshape(len(X), -1)

np.unique(Y)

pd.Series(Y).value_counts()

X.shape, X_updated.shape



"""### Prepare data"""

X_updated = X.reshape(len(X), -1)
X_updated.shape

"""### Split Data"""

xtrain, xtest, ytrain, ytest = train_test_split(X_updated, Y, random_state=0,
                                               test_size=.17)

xtrain.shape, xtest.shape

"""### Feature Scaling"""

print(xtrain.max(), xtrain.min())
print(xtest.max(), xtest.min())
from sklearn.preprocessing import StandardScaler
sc = StandardScaler()
xtrain = sc.fit_transform(xtrain)
xtest = sc.transform(xtest)
print(xtrain.max(), xtrain.min())
print(xtest.max(), xtest.min())







"""### Train Model"""

from sklearn.svm import SVC



sv = SVC(kernel="poly",degree=2,coef0=20,random_state=0)
sv.fit(xtrain, ytrain)

"""### Evaluation"""

print("Training Score:", sv.score(xtrain, ytrain))
print("Testing Score:", sv.score(xtest, ytest))
ypred = sv.predict(xtest)
from sklearn.metrics import confusion_matrix, accuracy_score
cm = confusion_matrix(ytest, ypred)
print("Confusion matrix: ")
print(cm)
print("Accuracy: ")
accuracy_score(ytest, ypred)



"""### Prediction"""

pred = sv.predict(xtest)

misclassified=np.where(ytest!=pred)
misclassified

print("Total Misclassified Samples: ",len(misclassified[0]))
print(pred[36],ytest[36])

"""### TEST MODEL"""

dec = {0:'No Tumor', 1:'Positive Tumor'}

# start = t.perf_counter()
# plt.figure(figsize=(50,50))
# p = os.listdir('Testing/')
# c=1
# for i in os.listdir('Testing/no_tumor/')[:100]:
#     plt.subplot(10,10,c)
    
#     img = cv2.imread('Testing/no_tumor/'+i,0)
#     img1 = cv2.resize(img, (200,200))
#     img1 = img1.reshape(1,-1)/255
#     p = sv.predict(img1)
#     plt.title(dec[p[0]])
#     plt.imshow(img, cmap='gray')
#     plt.axis('off')
#     c+=1
# f = t.perf_counter()
# print(f'Selesai pada waktu {round(f-start, 2)} detik')

start = t.perf_counter()
plt.figure(figsize=(50,50))
p = os.listdir('Testing/')
c=1
def proses():
  p = sv.predict(img1)
  title = plt.title(dec[p[0]])

  
for i in os.listdir('Testing/no_tumor/')[:100]:
    v = mp.Process(target=proses)   
    plt.subplot(10,10,c)
    img = cv2.imread('Testing/no_tumor/'+i,0)
    img1 = cv2.resize(img, (200,200))
    img1 = img1.reshape(1,-1)/255
    plt.imshow(img, cmap='gray')
    plt.axis('off')
    c+=1

    
f = t.perf_counter()
print(f'Selesai pada waktu {round(f-start, 2)} detik')

# start = t.perf_counter()
# plt.figure(figsize=(50,50))
# p = os.listdir('Testing/')
# c=1
# def proses():
#   p = sv.predict(img1)
#   plt.title(dec[p[0]])
#   v = mp.Process(target=proses)
#   img = cv2.imread('Testing/no_tumor/'+i,0)
#   img1 = cv2.resize(img, (200,200))
#   img1 = img1.reshape(1,-1)/255
  
# for i in os.listdir('Testing/no_tumor/')[:100]:
#     plt.subplot(10,10,c)
    
#     plt.imshow(img, cmap='gray')
#     plt.axis('off')
#     c+=1

# f = t.perf_counter()
# print(f'Selesai pada waktu {round(f-start, 2)} detik')

# start = t.perf_counter()
# plt.figure(figsize=(12,8))
# p = os.listdir('Testing/')
# c=1
# for i in os.listdir('Testing/pituitary_tumor/')[:100]:
#     plt.subplot(10,10,c)
    
#     img = cv2.imread('Testing/pituitary_tumor/'+i,0)
#     img1 = cv2.resize(img, (200,200))
#     img1 = img1.reshape(1,-1)/255
#     p = sv.predict(img1)
#     plt.title(dec[p[0]])
#     plt.imshow(img, cmap='gray')
#     plt.axis('off')
#     c+=1
# f = t.perf_counter()
# print(f'Selesai pada waktu {round(f-start, 2)} detik')

start = t.perf_counter()
plt.figure(figsize=(50,50))
p = os.listdir('Testing/')
c=1
def proses():
  p = sv.predict(img1)
  plt.title(dec[p(img1)[0]])

 
for i in os.listdir('Testing/pituitary_tumor/')[:100]:
    plt.subplot(10,10,c)
    
    img = cv2.imread('Testing/pituitary_tumor/'+i,0)
    img1 = cv2.resize(img, (200,200))
    img1 = img1.reshape(1,-1)/255
   
    plt.imshow(img, cmap='gray')
    plt.axis('off')
    c+=1
    v = mp.Process(target=proses)



f = t.perf_counter()
print(f'Selesai pada waktu {round(f-start, 2)} detik')



